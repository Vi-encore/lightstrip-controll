const btn = document.querySelector(".test");
const changeBtn = document.querySelector(".change");

btn.addEventListener("click", () => {
  navigator.bluetooth
    .requestDevice({
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ—ñ–ª—å—Ç—Ä –ø–æ –ø—Ä–µ—Ñ—ñ–∫—Å—É, —â–æ–± –∑–º–µ–Ω—à–∏—Ç–∏ —Å–ø–∏—Å–æ–∫
      filters: [{ namePrefix: "ELK" }],

      // üõë –ö–ª—é—á–æ–≤–∏–π –º–æ–º–µ–Ω—Ç: –Ø–≤–Ω–æ –∑–∞–ø–∏—Ç—É—î–º–æ –¥–æ—Å—Ç—É–ø –¥–æ FFE5.
      // –Ø–∫—â–æ –≤—ñ–Ω –∑–∞–ø—Ä–∞—Ü—é—î –ø—ñ—Å–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –∫–µ—à—É, –≤–∏ –ø—ñ–¥–∫–ª—é—á–∏—Ç–µ—Å—è.
      optionalServices: [0xffe0, 0xfff0, 0xffe5],
      // optionalServices: [0xffe5],
    })
    .then((device) => {
      console.log("Connected to device:", device);
      getUUID(device);
    })
    .catch((error) => {
      // ...
      console.error("Connection failed:", error);
    });
  // ...
});

function getUUID(device) {
  console.log(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ GATT-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é: ${device.name}...`);

  device.gatt
    .connect()
    .then((server) => {
      // 1. –ü—Ä—è–º–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≤—ñ–¥–æ–º–æ–≥–æ –°–µ—Ä–≤—ñ—Å—É 0xFFE0
      // –¶–µ –æ–±—Ö—ñ–¥ –ø—Ä–æ–±–ª–µ–º–∏ –∑ getPrimaryServices()
      return server.getPrimaryService(ELK_BLEDOM_SERVICE_UUID);
    })
    .then((service) => {
      // 2. –î–∏–Ω–∞–º—ñ—á–Ω–∏–π –ø–æ—à—É–∫ —Ä–æ–±–æ—á–æ—ó –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
      return findWorkingCharacteristic(service);
    })
    .then((characteristic) => {
      // 3. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–±–æ—á—É –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ
      characteristics_main = characteristic;

      console.log("‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞.");

      // –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ (–°–ø—Ä–æ–±—É–π—Ç–µ –ß–µ—Ä–≤–æ–Ω–∏–π)
      const commandTest = createColorCommand(128, 18, 36);
      // üõë –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ .buffer, —è–∫—â–æ createColorCommand –ø–æ–≤–µ—Ä—Ç–∞—î DataView!
      return characteristic.writeValue(commandTest.buffer);
    })
    .then(() => {
      console.log("‚úÖ –¢–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞. –°—Ç—Ä—ñ—á–∫–∞ –º–∞—î –∑–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä.");
    })
    .catch((error) => {
      console.error(
        "‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –°–µ—Ä–≤—ñ—Å –∞–±–æ —Ä–æ–±–æ—á–∏–π UUID:",
        error
      );
    });
}

// ======================================================
// –ö–û–ù–°–¢–ê–ù–¢–ò –î–õ–Ø –î–ò–ù–ê–ú–Ü–ß–ù–û–ì–û –ü–û–®–£–ö–£
// ======================================================
const ELK_BLEDOM_SERVICE_UUID = "0000fff0-0000-1000-8000-00805f9b34fb";
// –°–ø–∏—Å–æ–∫ –≤—ñ–¥–æ–º–∏—Ö –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑–∞–ø–∏—Å—É (0xFFF3 - –Ω–∞—à–∞ —Ä–æ–±–æ—á–∞, 0xFFE4 - –ø–æ—à–∏—Ä–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)
const WRITE_CHARACTERISTICS_CANDIDATES = [
  "0000fff3-0000-1000-8000-00805f9b34fb",
  "0000ffe4-0000-1000-8000-00805f9b34fb",
  "0000fffc-0000-1000-8000-00805f9b34fb",
];

// –ó—Ä–æ–±—ñ—Ç—å —Ü—é –∑–º—ñ–Ω–Ω—É –≥–ª–æ–±–∞–ª—å–Ω–æ—é, —â–æ–± –º–∞—Ç–∏ –¥–æ –Ω–µ—ó –¥–æ—Å—Ç—É–ø
let characteristics_main = null;

// ======================================================
// –•–ï–õ–ü–ï–†: –î–ò–ù–ê–ú–Ü–ß–ù–ò–ô –ü–û–®–£–ö –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò
// ======================================================
async function findWorkingCharacteristic(service) {
  for (const uuid of WRITE_CHARACTERISTICS_CANDIDATES) {
    try {
      console.log(`–°–ø—Ä–æ–±–∞ –∑–Ω–∞–π—Ç–∏ UUID: ${uuid}`);

      // –Ø–∫—â–æ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä–Ω–µ–º–æ —ó—ó
      const characteristic = await service.getCharacteristic(uuid);

      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–±–æ—á–∏–π WRITE UUID: ${uuid}`);
      return characteristic;
    } catch (error) {
      // –Ø–∫—â–æ NotFoundError, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ UUID
      continue;
    }
  }

  // –Ø–∫—â–æ –∂–æ–¥–µ–Ω UUID –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤
  throw new Error(
    "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Ä–æ–±–æ—á–æ—ó –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–∏—Å—É –≤ –°–µ—Ä–≤—ñ—Å—ñ FFE0."
  );
}

function createColorCommand(r, g, b) {
  const buffer = new ArrayBuffer(9);
  const dataView = new DataView(buffer);

  dataView.setUint8(0, 0x7e);
  dataView.setUint8(1, 0x07);
  dataView.setUint8(2, 0x05);
  dataView.setUint8(3, 0x03);

  dataView.setUint8(4, r); // R
  dataView.setUint8(5, g); // G
  dataView.setUint8(6, b); // B

  dataView.setUint8(7, 0x00);
  dataView.setUint8(8, 0xef);

  return dataView;
}

// function showDevice(device) {
//   console.log(`–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ GATT-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏—Å—Ç—Ä–æ—é: ${device.name}...`);

//   device.gatt
//     .connect()
//     .then((server) => {
//       // –û—Ç—Ä–∏–º–∞—Ç–∏ –í–°–Ü –æ—Å–Ω–æ–≤–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
//       return server.getPrimaryServices();
//     })
//     .then((services) => {
//       console.log("–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞—Å—Ç—É–ø–Ω—ñ –°–µ—Ä–≤—ñ—Å–∏:");
//       console.log(services); // <== –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ü–µ–π –º–∞—Å–∏–≤!

//       services.forEach((service) => {
//         console.log(`- Service UUID: ${service.uuid}`);

//         // –û—Ç—Ä–∏–º–∞—Ç–∏ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –°–µ—Ä–≤—ñ—Å—É
//         service.getCharacteristics().then((characteristics) => {
//           characteristics.forEach((char) => {
//             console.log(char);
//             console.log(
//               `   - Characteristic UUID: ${char.uuid} (Permissions: ${
//                 char.properties.write ? "WRITE" : "READ/NOTIFY"
//               })`
//             );
//           });
//         });
//       });
//     })
//     .catch((error) => {
//       console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤:", error);
//     });
// }

// // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –£–í–Ü–ú–ö–ù–ï–ù–ù–Ø (Turn ON)
// function createOnCommand() {
//     return new Uint8Array([0xCC, 0x23, 0x33]);
// }

// // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –í–ò–ú–ö–ù–ï–ù–ù–Ø (Turn OFF)
// function createOffCommand() {
//     return new Uint8Array([0xCC, 0x24, 0x33]);
// }

// // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ë—ñ–ª–æ–≥–æ –∫–æ–ª—å–æ—Ä—É
// function createWhiteCommand(brightnessW = 255) {
//     const buffer = new ArrayBuffer(9);
//     const dataView = new DataView(buffer);

//     dataView.setUint8(0, 0x7E);
//     dataView.setUint8(1, 0x04);
//     dataView.setUint8(2, 0x05); // White mode
//     dataView.setUint8(3, 0x03);
//     dataView.setUint8(4, brightnessW); // W value R
//     dataView.setUint8(5, brightnessW); // W value G
//     dataView.setUint8(6, brightnessW); // W value B
//     dataView.setUint8(7, 0x00);
//     dataView.setUint8(8, 0xEF);

//     return new Uint8Array(buffer);
// }

changeBtn.addEventListener("click", () => changeColor(characteristics_main));

function changeColor(characteristic) {
  // console.log(characteristic);
  // console.log(typeof characteristic);

  const r = Number(prompt("enter a RED value (0-255)"));
  const g = Number(prompt("enter a GREEN value (0-255)"));
  const b = Number(prompt("enter a BLUE value (0-255)"));

  const command = createColorCommand(r, g, b);

  return characteristic.writeValue(command);
}
